# -*- coding: mbcs -*-
from math import *
from abaqus import *
from abaqusConstants import *
from caeModules import *
from odbAccess import *

aa=1.0
bb=1.0
RR=3.0
NN=8
Spitch=1.25
Num=60
DR=bb/2.0+RR
RatioDb=RR*2.0/bb
RatioDp=RR*2.0/Spitch
da=2.0*pi/Num
dy=Spitch/Num
nodefileName='Ra'+str(int(RatioDb*10))+'Rp'+str(int(RatioDp*10))+'_node.inp'
elemfileName='Ra'+str(int(RatioDb*10))+'Rp'+str(int(RatioDp*10))+'_elem.inp'
setfileName='Ra'+str(int(RatioDb*10))+'Rp'+str(int(RatioDp*10))+'_set.inp'
inpfileName='Ra'+str(int(RatioDb*10))+'Rp'+str(int(RatioDp*10))+'_inp.inp'
jobName='Ra'+str(int(RatioDb*10))+'Rp'+str(int(RatioDp*10))+'_Spring'
NodeFile=open(nodefileName,'w')
ElemFile=open(elemfileName,'w')
SetFile=open(setfileName,'w')
InpFile=open(inpfileName,'w')
initN=0
initJ=(NN+1)*Num+10
x0=DR*cos(initN*da)
y0=initN*dy
z0=DR*sin(initN*da)
## form the node and element file
NodeFile.writelines('*NODE'+'\n')
NodeFile.writelines(str(initN+1)+', '+str(x0)+', '+str(y0)+', '+str(z0)+'\n')
ElemFile.writelines('*ELEMENT,'+' TYPE=B31,'+' ELSET=spring'+'\n')
while initN<=(Num*(NN+1)):
    initN=initN+1
    initJ=initJ+1
    x1=DR*cos(initN*da)
    y1=initN*dy
    z1=DR*sin(initN*da)
    xm=0.0
    ym=(initN+0.5)*dy
    zm=0.0
    NodeFile.writelines(str(initN+1)+', '+str(x1)+', '+str(y1)+', '+str(z1)+'\n')
    NodeFile.writelines(str(initJ)+', '+str(xm)+', '+str(ym)+', '+str(zm)+'\n')
    ElemFile.writelines(str(initN)+', '+str(initN)+', '+str(initN+1)+', '+str(initJ)+'\n')
#add the RP node
xp=0.0
yp=0.0
zp=0.0
NodeFile.writelines(str(Num*(NN+1)+6)+', '+str(xp)+', '+str(yp)+', '+str(zp)+'\n')
xp=0.0
yp=(NN+1)*Num*dy
zp=0.0
NodeFile.writelines(str(Num*(NN+1)+8)+', '+str(xp)+', '+str(yp)+', '+str(zp)+'\n')
NodeFile.close()
ElemFile.close()
## form the Set file
SetFile.writelines('*Beam Section, elset=spring, material=STEEL, poisson = 0.3, temperature=GRADIENTS, section=RECT'+'\n')
SetFile.writelines(str(float(bb))+', '+str(float(aa))+'\n')
#SetFile.writelines('*Beam Section, elset=spring, material=STEEL, poisson = 0.3, temperature=GRADIENTS, section=CIRC'+'\n')
#SetFile.writelines(str(float(wireR))+'\n')
SetFile.writelines('*Nset, nset=Set-fix, generate'+'\n')
SetFile.writelines('1'+', '+str(1*Num/2+1)+', 1'+'\n')
SetFile.writelines('*Nset, nset=Set-twist, generate'+'\n')
SetFile.writelines(str(int((NN+0.5)*Num+1))+', '+str((NN+1)*Num+1)+', 1'+'\n')
SetFile.writelines('*Nset, nset=Set-fixRP'+'\n')
SetFile.writelines(str(Num*(NN+1)+6)+',\n')
SetFile.writelines('*Nset, nset=Set-twistRP'+'\n')
SetFile.writelines(str(Num*(NN+1)+8)+',\n')
SetFile.close()
## form the inp file
InpFile.writelines('*Heading'+'\n')
InpFile.writelines('** Generated by: Su Jinghe: alwjybai@gmail.com'+'\n')
InpFile.writelines('** ----------------------------------------------------------------'+'\n')
InpFile.writelines('*INCLUDE, INPUT='+nodefileName+'\n')
InpFile.writelines('*INCLUDE, INPUT='+elemfileName+'\n')
InpFile.writelines('*INCLUDE, INPUT='+setfileName+'\n')
InpFile.writelines('*INCLUDE, INPUT=LoadandStep.inp'+'\n')
InpFile.close()
## submit the job and return the result
Mdb()
mdb.JobFromInputFile(name=jobName,inputFileName=inpfileName)
mdb.jobs[jobName].submit()
mdb.jobs[jobName].waitForCompletion()
odbPath=jobName+'.odb'
odb = openOdb(odbPath)
frame=odb.steps.values()[-1].frames[-1]
foutput=frame.fieldOutputs['RM']
fvalues=foutput.values[-2].data[1]
print fvalues