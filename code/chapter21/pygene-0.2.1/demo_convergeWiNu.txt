1   #! /usr/bin/env python
2   
3   """
4   Very simple demo in which organisms try to minimise
5   the output value of a function
6   """
7   
8   from pygene.gene import FloatGene, FloatGeneMax
9   from pygene.organism import Organism, MendelOrganism
10  from pygene.population import Population
11  
12  class CvGene(FloatGeneMax):
13      """
14      Gene which represents the numbers used in our organism
15      """
16      # genes get randomly generated within this range
17      randMin = -100.0
18      randMax = 100.0
19      
20      # probability of mutation
21      mutProb = 0.1
22      
23      # degree of mutation
24      mutAmt = 0.1
25  
26  
27  class Converger(MendelOrganism):
28      """
29      Implements the organism which tries
30      to converge a function
31      """
32      genome = {'x':CvGene, 'y':CvGene}
33      
34      def fitness(self):
35          """
36          Implements the 'fitness function' for this species.
37          Organisms try to evolve to minimise this function's value
38          """
39          return self['x'] ** 2 + self['y'] ** 2
40  
41      def __repr__(self):
42          return "<Converger fitness=%f x=%s y=%s>" % (
43              self.fitness(), self['x'], self['y'])
44  
45  
46  # create an empty population
47  
48  pop = Population(species=Converger, init=2, childCount=50, childCull=20)
49  
50  
51  # now a func to run the population
52  
53  def main():
54      try:
55          while True:
56              # execute a generation
57              pop.gen()
58  
59              # get the fittest member
60              best = pop.best()
61              
62              # and dump it out
63              print best
64  
65      except KeyboardInterrupt:
66          pass
67  
68  
69  if __name__ == '__main__':
70      main()
71  
